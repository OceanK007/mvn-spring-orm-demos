application.status=ACTIVE

#######################################::: Logging :::##########################################
######## Logging levels ########
#Level	Color

#FATAL	Red
#ERROR	Red
#WARN	Yellow
#INFO	Green
#DEBUG	Green		| It will display all debug lines on console if set on root level
#TRACE	Green

## Logging for console
logging.level.root=INFO
logging.level.org.springframework.web=WARN
logging.level.org.hibernate=ERROR
# logs the SQL statements | It's equivalent to 'spring.jpa.properties.hibernate.show_sql=true'
logging.level.org.hibernate.SQL=DEBUG
# Logs the JDBC parameters passed to a query | select query displays values fetched from database | insert query displays parameter's value passed
logging.level.org.hibernate.type.descriptor.sql=trace

# Logging to a temp_folder/file
logging.file=${java.io.tmpdir}/application.log

# Logging to a file
#logging.file=D:/application.log

# Logging pattern for the console
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %green(%-5level) %cyan(%logger{100}) - %msg%n
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{100} - %msg%n

# Logging pattern for file
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{100} - %msg%n

# Enabling color-coded logging output | If your terminal supports ANSI
# Values can be: ALWAYS, NEVER or DETECT(default)
# spring.output.ansi.enabled=ALWAYS

# If you want multiple logging file configuration then you need to create .xml file for logging

#################################################################################################

# The H2 Console application lets you access a database using a browser. 
# This can be a H2 database, or another database that supports the JDBC API. 
# This is a client/server application, so both a server and a client (a browser) are required to run it.
spring.h2.console.enabled=true

########################### ::: Database Configuration ::: #####################################
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/spring_orm_demos
spring.datasource.username=root
spring.datasource.password=root

##=====## If you want to create DataSource bean and define database configuration there, then use this. ##=====##	
#custom.driverClassName=com.mysql.jdbc.Driver
#custom.url=jdbc:mysql://localhost:3306/spring_orm_demos
#custom.username=root
#custom.password=root

########################### ::: MongoDB Database Configuration ::: #####################################
#spring.data.mongodb.uri=mongodb://localhost/exemplo
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=spring_orm_demos
#spring.data.mongodb.username=
#spring.data.mongodb.password=

########################### ::: HikariCP Connection Pooling Configuration ::: #####################################
spring.datasource.poolName = SpringBootHikariCP
spring.datasource.maximumPoolSize = 5
spring.datasource.minimumIdle = 3
spring.datasource.maxLifetime = 2000000
spring.datasource.connectionTimeout = 30000
spring.datasource.idleTimeout = 30000
spring.datasource.pool-prepared-statements = true
spring.datasource.max-open-prepared-statements = 250

########################### ::: Hibernate Configuration ::: ####################################
## spring.jpa.hibernate.ddl-auto values can be : none, update, create, create-drop ##
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true

## The SQL dialect makes Hibernate generate better SQL for the chosen database ##
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect

## Naming strategy: When creating table, the column names are defined by this strategy  ##
# (Default: ImprovedNamingStrategy till spring boot v1.3)
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy 
# (Default: PhysicalNamingStrategyStandardImpl from spring boot v1.4 and above)
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

## Keep the connection alive if idle for a long time (needed in production) ##
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

##=====## If you want to create LocalSessionFactoryBean bean and define hibernate config there, then use this. ##=====##
#custom.hibernate.ddl-auto=update
#custom.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#custom.hibernate.show_sql=true
#custom.hibernate.format_sql=true
# Replacement of @ComponentScan of @SpringBootApplication annotation
#custom.packageToScan=com.ocean.springboot

########################### ::: Caching Configuration ::: ####################################
#Make sure to include ehcache.xml file in your project to enable Ehcache
## Use this when .xml file is in another location instead of resources folder
#spring.cache.ehcache.config=classpath:config/another-config.xml