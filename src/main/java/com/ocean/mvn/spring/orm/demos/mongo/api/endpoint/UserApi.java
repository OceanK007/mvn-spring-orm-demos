package com.ocean.mvn.spring.orm.demos.mongo.api.endpoint;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ocean.mvn.spring.orm.demos.data.dto.UserDTO;
import com.ocean.mvn.spring.orm.demos.mongo.service.UserService;
import com.ocean.mvn.spring.orm.demos.util.constant.ApiConstant;

//If you don't give name attribute then spring will try to create bean with name userApi which already exist since we have another UserApi file and it will throw exception.
@RestController(value="userMongoApi")		
@RequestMapping(ApiConstant.USER_API_MONGO)
public class UserApi 
{
	private static final Logger logger = LoggerFactory.getLogger(UserApi.class);
	
	@Autowired	// This means to get the bean called userService, which is auto-generated by Spring
	UserService userService;
	
	
	@RequestMapping(value="/list", method=RequestMethod.GET)
	List<UserDTO> getUserList()
	{
		return userService.getUserList();
	}
	
	@RequestMapping(value="/findByUsername", method=RequestMethod.GET)
	UserDTO findByUsername(@RequestParam(value="username") String username)
	{
		return userService.findByUsername(username);
	}

	@RequestMapping(value="/findByAddress", method=RequestMethod.GET)
	List<UserDTO> findByAddress(@RequestParam(value="address") String address)
	{
		return userService.findByAddress(address);
	}
	
	/** 
		Test JSON
	 
	 	{
		    "username": "ocean1",
		    "password": "12345",
		    "roleDTO": 
		    {
		    	"roleType": "Admin"
		    },
		    "userDetailDTO": 
		    {
		        "firstName": "Ocean1",
		        "middleName": null,
		        "lastName": "Life",
		        "gender": "Male",
		        "email": "OceanK007@gmail.com",
		        "address": "Chasing my bliss",
		        "zip": "110094"
		    }
		}
	**/
	@RequestMapping(value="/create", method=RequestMethod.POST)
	UserDTO createUser(@RequestBody UserDTO userDTO)
	{
		return userService.createUser(userDTO);
	}
	
	@RequestMapping(value="/update", method=RequestMethod.POST)
	public UserDTO updateUser(@RequestBody UserDTO userDTO)
	{
		return userService.updateUser(userDTO);
	}
	
	@RequestMapping(value="/deleteById", method=RequestMethod.GET)
	void deleteUserById(@RequestParam(value="mongoId") String mongoId)
	{
		userService.deleteUserById(mongoId);
	}
}
